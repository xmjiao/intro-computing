#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usetheme{Boadilla}
  
\setbeamertemplate{footline}
{\leavevmode
\hbox{\begin{beamercolorbox}[wd=.333333333\paperwidth,ht=2.25ex,dp=1ex,center]{author in head/foot}
\usebeamerfont{author in head/ foot}
\insertshortauthor
\end{beamercolorbox}\begin{beamercolorbox}[wd=.333333333\paperwidth,ht=2.25ex,dp=1ex,center]{title  in head/foot}
\usebeamerfont{title in head/foot}
Numerical Analysis I \end{beamercolorbox}\begin{beamercolorbox}[wd=.333333333\paperwidth,ht=2.25ex,dp=1ex,right]{date in head/foot}
\usebeamerfont{date in head/foot}
\hspace*{2em} 
\insertframenumber{} / \inserttotalframenumber\hspace*{2em}
\end{beamercolorbox}}
\vskip0pt
}
\setbeamertemplate{navigation symbols}{} 

\usepackage{algorithmic}
%\def\vec#1{\mbox{\boldmath $#1$}}
\def\vec#1{#1}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
AMS 595/691: Fundamentals of Computing: Part II
\end_layout

\begin_layout Subtitle
Lecture 2: Built-in Data Structures;
\begin_inset Newline newline
\end_inset

Exceptions
\end_layout

\begin_layout Author
Xiangmin Jiao
\end_layout

\begin_layout Institute
Stony Brook University
\end_layout

\begin_layout Date
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AtBeginSection[]{
\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{
\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Outline}
\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection] 
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
beamerdefaultoverlayspecification{<+->}
\end_layout

\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Built-in Data Structures
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Python has some built-in data structures (containers), such as lists, tuples,
 sets, dictionaries, etc.
\end_layout

\begin_layout Itemize
Lists in Python (enclosed by '[' and ']') are similar to cell arrays (enclosed
 by '{' and '}') in MATLAB
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Implemented as a variable-length array, instead of linked list
\end_layout

\begin_layout Itemize
Can store multiple different datatypes in a single list; e.g.,
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

a=[1,2,'abc']
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Can be accessed by indexing and slicing
\end_layout

\begin_layout Itemize
Can be modified by methods append, insert, sort, etc.
\end_layout

\end_deeper
\begin_layout Itemize
Dictionaries are similar to list but with names (keys)
\end_layout

\begin_layout Itemize
Tuples (comma separated expressions) are similar to lists, but are immutable
\end_layout

\begin_layout Itemize
Sets (enclosed by '{' and '}') are similar to lists, but contain unordered
 unique elements; frozenset is its immutable counterpart
\end_layout

\begin_layout Itemize
Array is provided by other modules (later)
\end_layout

\begin_layout Itemize
Demo:
\color blue
 
\begin_inset CommandInset href
LatexCommand href
name "Jupyter notebook on advanced data types"
target "http://nbviewer.jupyter.org/url/www.ams.sunysb.edu/%7Ejiao/teaching/ams595/Notebooks/python-advanced-datatypes.ipynb"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Mutable vs.
 Immutable Objects
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Immutable objects
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Basic data types: int, float, complex, string
\end_layout

\begin_layout Itemize
tuple, frozenset
\end_layout

\end_deeper
\begin_layout Itemize
Mutable objects
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
list, dict, set
\end_layout

\begin_layout Itemize
numpy.array and most user-defined classes
\end_layout

\end_deeper
\begin_layout Itemize
Assignment behaves differently for mutable and immutable objects 
\end_layout

\begin_deeper
\begin_layout Itemize
For immutable basic types (numbers and strings), '=' copies value; for mutable
 objects, '=' creates an "alias";
\color blue
 
\begin_inset CommandInset href
LatexCommand href
name "see visualization here"
target "http://www.pythontutor.com/visualize.html#code=%23%20Assignment%20of%20immutable%20objects%20means%20copying%0Ax%20%3D%20'abc'%0Ay%20%3D%20x%0Ay%20%3D%20'def'%0Aprint%20(x,%20y%29%0A%0A%23%20Assignment%20of%20mutable%20objects%20means%20aliasing%0Aa%20%3D%20%5B-1,%20-2.1,%20-2.0,%20'my%20list',%204%5D%0Ab%20%3D%20a%20%20%23%20this%20is%20just%20a%20pointer,%20both%20a%20and%20b%20refer%20to%20the%20same%20list%20object%20in%20memory%0Aprint(a%29%0Aa%5B0%5D%20%3D%20%22changed%22%0Aprint(b%29&cumulative=false&curInstr=0&heapPrimitives=false&mode=display&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false"

\end_inset


\color inherit

\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Itemize
'=' not allowed for entities/data members of immutable objects
\end_layout

\begin_layout Itemize
For mutable objects
\end_layout

\begin_deeper
\begin_layout Itemize
trg=src makes trg a 
\emph on
reference
\emph default
 to src, so changing entities or data members in src would change those
 in trg and vice versa
\end_layout

\begin_layout Itemize
trg=copy.copy(src) performs 
\emph on
shallow copy
\emph default
 (so does constructor (e.g.
 trg=list(src)) or slicing (e.g., trg=src[:])), so mutable entities or data
 members are still references
\end_layout

\begin_layout Itemize
trg=copy.deepcopy(src) performs 
\emph on
deep copy
\emph default
, so mutable entities or data members are copied recursively
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Exceptions
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Unlike 
\emph on
syntax errors
\emph default
, which are grammar errors during parsing time, runtime errors are handled
 using 
\emph on
exceptions
\end_layout

\begin_layout Itemize
Exceptions are handled using try-except-else-finally blocks
\end_layout

\begin_layout Itemize
There are many 
\color blue

\begin_inset CommandInset href
LatexCommand href
name "built-in exceptions"
target "https://docs.python.org/3/library/exceptions.html#bltin-exceptions"

\end_inset


\color inherit
, such as division by zero, non-existing key in dictionary, open non-existing
 file, etc.
\end_layout

\begin_layout Itemize
It is a good practice to catch errors and report useful error messages
\end_layout

\begin_layout Itemize
Use the 
\family typewriter
raise
\family default
 statement to raise or re-raise exceptions
\end_layout

\begin_layout Itemize
Demo: 
\color blue

\begin_inset CommandInset href
LatexCommand href
name "Jupyter notebook on exceptions"
target "http://nbviewer.jupyter.org/url/www.ams.sunysb.edu/%7Ejiao/teaching/ams595/Notebooks/python-exceptions.ipynb"

\end_inset


\end_layout

\end_deeper
\end_body
\end_document
