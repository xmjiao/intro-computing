#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usetheme{Boadilla}
  
\setbeamertemplate{footline}
{\leavevmode
\hbox{\begin{beamercolorbox}[wd=.333333333\paperwidth,ht=2.25ex,dp=1ex,center]{author in head/foot}
\usebeamerfont{author in head/ foot}
\insertshortauthor
\end{beamercolorbox}\begin{beamercolorbox}[wd=.333333333\paperwidth,ht=2.25ex,dp=1ex,center]{title  in head/foot}
\usebeamerfont{title in head/foot}
Numerical Analysis I \end{beamercolorbox}\begin{beamercolorbox}[wd=.333333333\paperwidth,ht=2.25ex,dp=1ex,right]{date in head/foot}
\usebeamerfont{date in head/foot}
\hspace*{2em} 
\insertframenumber{} / \inserttotalframenumber\hspace*{2em}
\end{beamercolorbox}}
\vskip0pt
}
\setbeamertemplate{navigation symbols}{} 

\usepackage{algorithmic}
%\def\vec#1{\mbox{\boldmath $#1$}}
\def\vec#1{#1}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
AMS 595/691: Fundamentals of Computing: Part II
\end_layout

\begin_layout Subtitle
Lecture 4: Text File I/O and Regular Expressions
\end_layout

\begin_layout Author
Xiangmin Jiao
\end_layout

\begin_layout Institute
Stony Brook University
\end_layout

\begin_layout Date
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AtBeginSection[]{
\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{
\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Outline}
\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection] 
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
beamerdefaultoverlayspecification{<+->}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Text File I/O
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Print Method and Formatting
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Itemize
Most basic output: 
\family typewriter
str(obj)
\family default
 or 
\family typewriter
repr(obj)
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
str()
\family default
 produces human readable output
\end_layout

\begin_layout Itemize

\family typewriter
repr()
\family default
 produces interpreter-readable output
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
print()
\family default
 method adds space between arguments and newline at end
\end_layout

\begin_layout Itemize
Easy adjustment using 
\family typewriter
str.ljust
\family default
(
\begin_inset Formula $n$
\end_inset

) or 
\family typewriter
str.rjust
\family default
(
\begin_inset Formula $n$
\end_inset

)
\end_layout

\begin_layout Itemize
Fancier output with 
\family typewriter
str.format()
\end_layout

\begin_deeper
\begin_layout Itemize
Use {}, {index}, or {keyword} to denote argument
\end_layout

\begin_layout Itemize
Optional ':' and format specifier can follow index or keyword
\end_layout

\end_deeper
\begin_layout Itemize
To prompt user to input data in command line, use 
\family typewriter
input('msg')
\end_layout

\begin_layout Itemize
See 
\color blue

\begin_inset CommandInset href
LatexCommand href
name "Jupyter notebook on I/O"
target "http://nbviewer.jupyter.org/url/www.ams.sunysb.edu/%7Ejiao/teaching/ams595/Notebooks/python-io.ipynb"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Read and Write Text Files
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Open file with 
\family typewriter
open(filename, mode)
\family default
, where mode can be 'r' for read, 'w' for write, and 'a' for append
\end_layout

\begin_layout Itemize

\family typewriter
file.write(str)
\family default
 writes a string into file (no newline added)
\end_layout

\begin_layout Itemize

\family typewriter
str = file.read()
\family default
 reads the whole file into string
\end_layout

\begin_layout Itemize

\family typewriter
file.readline()
\family default
 reads single line
\end_layout

\begin_layout Itemize
Use 
\family typewriter
for
\family default
 statement to loop through lines (instead of 
\family typewriter
file.readline()
\family default
)
\end_layout

\begin_layout Itemize
Must use
\family typewriter
 file.close()
\family default
 when done reading/writing
\end_layout

\begin_layout Itemize
Alternatively, use 
\family typewriter
with
\family default
 statement to close file automatically
\end_layout

\begin_layout Itemize
See 
\color blue

\begin_inset CommandInset href
LatexCommand href
name "Jupyter notebook on I/O"
target "http://nbviewer.jupyter.org/url/www.ams.sunysb.edu/%7Ejiao/teaching/ams595/Notebooks/python-io.ipynb"

\end_inset


\end_layout

\end_deeper
\begin_layout Section
Regular Expressions
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Python Regular Expressions
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Regular expressions are a powerful language for matching text patterns
\end_layout

\begin_layout Itemize
Python "re" module provides regular expression support
\end_layout

\begin_layout Itemize
Use pattern to search and replace
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
match = re.search(pat, str)
\family default
 finds one match
\end_layout

\begin_layout Itemize

\family typewriter
matches = re.findall(pat, str)
\family default
 find all matches
\end_layout

\begin_layout Itemize

\family typewriter
re.sub(pat, replacement, str)
\family default
 substitute all matches with replacement string
\end_layout

\end_deeper
\begin_layout Itemize
See 
\color blue

\begin_inset CommandInset href
LatexCommand href
name "Jupyter notebook on regular expressions"
target "http://nbviewer.jupyter.org/url/www.ams.sunysb.edu/%7Ejiao/teaching/ams595/Notebooks/python-regex.ipynb"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Basic Patterns
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
ordinary characters match themselves, except for meta-characters .
 ^ $ * + ? { [ ] 
\backslash
 | ( )
\end_layout

\begin_layout Itemize
.
 (a period): matches any single character except newline '
\backslash
n'
\end_layout

\begin_layout Itemize

\backslash
w: matches a letter or digit or underbar [a-zA-Z0-9_]; 
\backslash
W matches any non-word character
\end_layout

\begin_layout Itemize

\backslash
b: boundary between word and non-word 
\end_layout

\begin_layout Itemize

\backslash
s: a single whitespace character ([ 
\backslash
n
\backslash
r
\backslash
t
\backslash
f]); 
\backslash
S matches any non-whitespace character
\end_layout

\begin_layout Itemize

\backslash
t, 
\backslash
n, 
\backslash
r: tab, newline, return 
\end_layout

\begin_layout Itemize

\backslash
d: decimal digit [0-9]
\end_layout

\begin_layout Itemize

\backslash
: escape character
\end_layout

\begin_layout Itemize
^, $: match the start or end of the string, respectively
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Repetition
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
+: 1 or more occurrences of the pattern to its left, e.g.
 'i+' = one or more i's 
\end_layout

\begin_layout Itemize
*: 0 or more occurrences of the pattern to its left 
\end_layout

\begin_layout Itemize
?: match 0 or 1 occurrences of the pattern to its left
\end_layout

\begin_layout Itemize
{
\begin_inset Formula $m$
\end_inset

}: 
\begin_inset Formula $m$
\end_inset

 repetitions of the pattern to its left
\end_layout

\begin_layout Itemize
{
\begin_inset Formula $m$
\end_inset

,
\begin_inset Formula $n$
\end_inset

}: 
\begin_inset Formula $m$
\end_inset

 to 
\begin_inset Formula $n$
\end_inset

 repetitions of the pattern to its left
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Square Brackets
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Square brackets can be used to indicate a set of chars, so [abc] matches
 'a' or 'b' or 'c'.
 
\end_layout

\begin_layout Itemize

\backslash
w, 
\backslash
s etc.
 work inside square brackets too, except that dot (.) just means a literal
 dot
\end_layout

\begin_layout Itemize
Use a dash to indicate a range, so [a-z] matches all lowercase letters (unless
 dash is last)
\end_layout

\begin_layout Itemize
An up-hat (^) at the start of a square-bracket set inverts it, so [^ab]
 means any char except 'a' or 'b'.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Rules of Regular Expression Search
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
The search proceeds through the string from start to end, stopping at the
 first match found
\end_layout

\begin_layout Itemize
All of the pattern must be matched, but not all of the string
\end_layout

\begin_layout Itemize
If 
\family typewriter
match = re.search(pat, str)
\family default
 is successful, match is not None and in particular match.group() is the
 matching text
\end_layout

\begin_layout Itemize
Search tries to use up as much of the string as possible -- i.e.
 + and * are greedy
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Group Extraction
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
The 
\begin_inset Quotes eld
\end_inset

group
\begin_inset Quotes erd
\end_inset

 feature allows you to pick out parts of matching text
\end_layout

\begin_deeper
\begin_layout Itemize
(
\begin_inset Formula $\dots$
\end_inset

): captures group 
\end_layout

\begin_layout Itemize
(
\begin_inset Formula $\dots$
\end_inset

(
\begin_inset Formula $\dots$
\end_inset

)) captures sub-group 
\end_layout

\begin_layout Itemize
(abc|def) captures matches abc or def
\end_layout

\end_deeper
\begin_layout Itemize
To define a group, add add parenthesis ( ) around a sub-pattern
\end_layout

\begin_deeper
\begin_layout Itemize
e.g., r'([
\backslash
w.-]+)@([
\backslash
w.-]+)' defines two groups
\end_layout

\end_deeper
\begin_layout Itemize
On successful search, match.group(1) is matched text corresponding to 1st
 group, and match.group(2) is text corresponding to 2nd group, etc.
 (i.e., indices of groups are 1-based instead of 0-based)
\end_layout

\begin_layout Itemize
Plain match.group() is still the whole matched text
\end_layout

\begin_layout Itemize
Matched groups can be referenced by 
\backslash
1, 
\backslash
2 etc.
 in replacement string
\end_layout

\end_deeper
\end_body
\end_document
