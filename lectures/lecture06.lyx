#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usetheme{Boadilla}
  
\setbeamertemplate{footline}
{\leavevmode
\hbox{\begin{beamercolorbox}[wd=.333333333\paperwidth,ht=2.25ex,dp=1ex,center]{author in head/foot}
\usebeamerfont{author in head/ foot}
\insertshortauthor
\end{beamercolorbox}\begin{beamercolorbox}[wd=.333333333\paperwidth,ht=2.25ex,dp=1ex,center]{title  in head/foot}
\usebeamerfont{title in head/foot}
Numerical Analysis I \end{beamercolorbox}\begin{beamercolorbox}[wd=.333333333\paperwidth,ht=2.25ex,dp=1ex,right]{date in head/foot}
\usebeamerfont{date in head/foot}
\hspace*{2em} 
\insertframenumber{} / \inserttotalframenumber\hspace*{2em}
\end{beamercolorbox}}
\vskip0pt
}
\setbeamertemplate{navigation symbols}{} 

\usepackage{algorithmic}
%\def\vec#1{\mbox{\boldmath $#1$}}
\def\vec#1{#1}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
AMS 595/691: Fundamentals of Computing: Part II
\end_layout

\begin_layout Subtitle
Lecture 6: Array Computation and Curve Plotting
\end_layout

\begin_layout Author
Xiangmin Jiao
\end_layout

\begin_layout Institute
Stony Brook University
\end_layout

\begin_layout Date
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AtBeginSection[]{
\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{
\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Outline}
\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection] 
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
beamerdefaultoverlayspecification{<+->}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Array Computations with NumPy
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Introduction to NumPy
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
NumPy provides multidimensional arrays
\end_layout

\begin_deeper
\begin_layout Itemize
All elements must be the same data type
\end_layout

\begin_layout Itemize
Many different data types supported
\end_layout

\begin_layout Itemize
Size is fixed (memory is allocated for the size specified)
\end_layout

\end_deeper
\begin_layout Itemize
Arithmetic operations work on arrays
\end_layout

\begin_layout Itemize
Provides MANY functions that operate on whole arrays
\end_layout

\begin_deeper
\begin_layout Itemize
These operations are written in a compiled language, and run fast
\end_layout

\begin_layout Itemize
Generally speaking, you want to avoid loops to get the best performance,
 although it may make code unreadable
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Intro to NumPy: Array Operations
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Arithmetic operator (+, â”€, /, *) work element-wise
\end_layout

\begin_deeper
\begin_layout Itemize
A * B is not a matrix product, but is element-wise multiplication, similar
 to .* in MATLAB
\end_layout

\begin_layout Itemize
instead multiples the corresponding elements in each array together 
\end_layout

\begin_layout Itemize
dot(A, B) does a dot product 
\end_layout

\end_deeper
\begin_layout Itemize
Universal functions (sin, cos, exp, ...) work element-wise 
\end_layout

\begin_layout Itemize
NumPy has a matrix class, which is a subclass of array
\end_layout

\begin_deeper
\begin_layout Itemize
* are matrix-matrix multiplication
\end_layout

\end_deeper
\begin_layout Itemize
See 
\color blue

\begin_inset CommandInset href
LatexCommand href
name "Numpy for Matlab users"
target "http://docs.scipy.org/doc/numpy-dev/user/numpy-for-matlab-users.html"

\end_inset


\color inherit
 for mapping from MATLAB to NumPy
\end_layout

\begin_layout Itemize
Many linear-algebra functions are provided SciPy (next lecture)
\end_layout

\begin_layout Itemize
See 
\color blue

\begin_inset CommandInset href
LatexCommand href
name "Jupyter notebook on NumPy"
target "http://nbviewer.jupyter.org/url/www.ams.sunysb.edu/%7Ejiao/teaching/ams595/Notebooks/numpy-basics.ipynb"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Key Differences Between NumPy and MATLAB
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
1-based (MATLAB) vs.
 0-based (Python) indexing
\end_layout

\begin_layout Itemize
Pass by value (MATLAB) vs.
 pass by reference (Python)
\end_layout

\begin_deeper
\begin_layout Itemize
In Python, slicing creates a 
\begin_inset Quotes eld
\end_inset

view
\begin_inset Quotes erd
\end_inset

 into an array
\end_layout

\end_deeper
\begin_layout Itemize
Column major vs.
 row major
\end_layout

\begin_deeper
\begin_layout Itemize
MATLAB (like Fortran) uses 
\emph on
column major
\end_layout

\begin_layout Itemize
Python (like C) uses 
\emph on
row major
\end_layout

\begin_layout Itemize
This is important to understand for efficiency and for passing data between
 different languages
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename row-vs-column.jpg
	height 40theight%

\end_inset


\end_layout

\end_deeper
\begin_layout Section
Curve Plotting
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Plotting using Matplotlib
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\color blue
\begin_inset CommandInset href
LatexCommand href
name "Matplotlib"
target "http://matplotlib.org/"

\end_inset


\color inherit
 is standard plotting library for scientific python
\end_layout

\begin_deeper
\begin_layout Itemize
Mostly for 2-d data
\end_layout

\begin_layout Itemize
Can use LaTeX commands for equations
\end_layout

\begin_layout Itemize
Can produce 
\begin_inset Quotes eld
\end_inset

publication-quality
\begin_inset Quotes erd
\end_inset

 plots; see 
\color blue

\begin_inset CommandInset href
LatexCommand href
name "gallery"
target "http://matplotlib.org/gallery.html"

\end_inset


\color inherit
 for examples
\end_layout

\end_deeper
\begin_layout Itemize
Importing Matplotlib
\end_layout

\begin_deeper
\begin_layout Itemize
matplotlib is the entire package
\end_layout

\begin_layout Itemize
matplotlib.pyplot is a module within matplotlib that provides easy access
 to the core plotting routines
\end_layout

\begin_layout Itemize
pylab combines pyplot and numpy into a single namespace to provide MATLAB-like
 interface
\end_layout

\end_deeper
\begin_layout Itemize
See 
\color blue

\begin_inset CommandInset href
LatexCommand href
name "Jupyter notebook on Matplotlib"
target "http://nbviewer.jupyter.org/url/www.ams.sunysb.edu/%7Ejiao/teaching/ams595/Notebooks/matplotlib-basics.ipynb"

\end_inset


\color inherit
 with 
\color blue

\begin_inset CommandInset href
LatexCommand href
name "this sample data"
target "http://www.ams.sunysb.edu/%7Ejiao/teaching/ams595/Notebooks/test1.exact.128.out"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Section
File I/O for Arrays
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Text and Binary File
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\color blue
\begin_inset CommandInset href
LatexCommand href
name "numpy.loadtxt()"
target "http://docs.scipy.org/doc/numpy/reference/generated/numpy.loadtxt.html"

\end_inset


\color inherit
 provides easy way to load rows of data from text file
\end_layout

\begin_layout Itemize
SciPy's 
\begin_inset CommandInset href
LatexCommand href
name "scipy.io"
target "http://docs.scipy.org/doc/scipy/reference/tutorial/io.html"

\end_inset

 module provides methods to read and write MATLAB's MAT files, which are
 binary files
\end_layout

\end_deeper
\end_body
\end_document
